@import url('https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap');

.card{
  max-width: 350px;
  background-color: #fd7557;
  border-radius: 25px;
  padding: 30px;
  font-family: 'Poppins', sans-serif;

  &__item{
    padding: 10px;
  }

  &__plan{
    font-size: 22px;
  }

  &__price{
    font-weight: 600;
    font-size: 40px;
  }

}
//ng-deep e para perfurar o view encapssulation. Entao se eu usa-lo no styles.css nao vai resultar em nada
/*ng-deep afeta qualquer componente que tem a classe que estou mudando indepedne se for componente filho ou nao(verifica ate os componentes diretos dos pais, ou seja tudo onde tem a classe). 
Para nao afetar o componente fora do escopo do card, esse meu exemplo estoupegando o id do coponente e mudando o bg-color da classe interna .car-cancel-button.
Posso fazer com classe caso eu queira que os componentes do card tenham a mesma atualização via uma classe externa:

::ng-deep .cancel-button . card-cancel-button{
background-color:yelow
}

ou posso colocar o nome da tag:
::ng-deep  app-button-cancel .card-cancel-button{
background-color:yelow
}

Com essas abordagem eu evito o transbordamento do ng-deep onde eu n quero
*/

// ::ng-deep #cancel-button .card-cancel-button{
//   background-color: yellow ;
// }

// para classe eu devo usar o !important ja que id e mais especifico e nao precisa disso
// ::ng-deep .cancel-button .card-cancel-button{
//   background-color: yellow !important;
// }

/*Para não transbordar as alterações do ng-deep posso usá-lo juntamente com o :host .
Dessa maneira nao pricisarei usar de classe ou ids externos para isolar os efeitos do ng-deep*/

:host ::ng-deep .card-cancel-button{
  background-color: yellow !important;
}


// Manipulação local dentro do card.component  do slider do Angular Material

:host ::ng-deep  mat-slider .mdc-slider__track--active_fill{ //Quanto mais especifico melhor, pois pode ocorrer do angular usar essa classe em outro local
   border-color: yellowgreen !important;
 }